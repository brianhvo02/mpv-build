#!/bin/sh
export LC_ALL=C

do_clone()
{
    set -ex
    if ! test -e "$1" ; then
        git clone "$2" "$1"
    fi
    (
        cd "$1"
        git remote set-url origin "$2"
        git fetch
        git submodule update --init
    )
}

do_clone_all()
{
    do_clone "bzip2"        "https://sourceware.org/git/bzip2.git"
    do_clone "dav1d"        "https://code.videolan.org/videolan/dav1d.git"
    do_clone "ffmpeg"       "https://github.com/FFmpeg/FFmpeg.git"
    do_clone "fontconfig"   "https://gitlab.freedesktop.org/fontconfig/fontconfig.git"
    do_clone "freetype"     "https://gitlab.freedesktop.org/freetype/freetype.git"
    do_clone "fribidi"      "https://github.com/fribidi/fribidi.git"
    do_clone "harfbuzz"     "https://github.com/harfbuzz/harfbuzz.git"
    do_clone "libass"       "https://github.com/libass/libass.git"
    do_clone "libexpat"     "https://github.com/libexpat/libexpat.git"
    do_clone "libplacebo"   "https://github.com/haasn/libplacebo.git"
    do_clone "libpng"       "https://github.com/pnggroup/libpng.git"
    do_clone "mpv"          "https://github.com/mpv-player/mpv.git"
    do_clone "openal"       "https://github.com/kcat/openal-soft.git"
    do_clone "openssl"       "https://github.com/openssl/openssl.git"
    do_clone "sdl"          "https://github.com/libsdl-org/SDL.git"
    do_clone "zlib"         "https://github.com/madler/zlib.git"
}

do_gitmaster()
{
    set -ex
    (
        cd "$1"
        git checkout origin/master
        git remote prune origin
    )
}

do_gitmain()
{
    set -ex
    (
        cd "$1"
        git checkout origin/main
        git remote prune origin
    )
}

versort_with_prefix()
{
	# Emulate sort -V using a known prefix. Filter out anything else.
	sed -n -e "s/^$1\([0-9]\)/\\1/p" |\
		sort -n -t . -k 1,1 -k 2,2 -k 3,3 -k 4,4 |\
		sed -e "s/^/$1/"
	# GNU version of the same:
	# grep "^$2[0-9]" | sort -V
}

do_releasetag()
{
    local prefix=  # by default, don't use a prefix
    case "$1" in
        ffmpeg) prefix=n;;  # e.g. n3.3.1
        mpv|libplacebo)    prefix=v;;  # e.g. v0.26.0
    esac

    (
        cd "$1"
        version=`git tag | grep -v rc | grep -v dev | versort_with_prefix "$prefix" | tail -n 1`
        git checkout refs/tags/"$version"
    )
}

do_fixedref()
{
    (
        cd "$1"
        git checkout "$2"
    )
}

# args: $1: project name, $2: release/master/@foo [,$3: non-empty to ignore the config file]
checkout()
{
    local branch="$2"
    if [ -z "$3" ] && [ -d config/ ] && [ -f config/branch-$1 ]; then
        branch="$(cat config/branch-$1)"
    fi

    case "$branch" in
        main)    do_gitmain $1;;
        master)  do_gitmaster $1;;
        release) do_releasetag $1;;
        @*)      do_fixedref $1 "${branch#@}";;  # everything after the '@' prefix
        *)       >&2 printf "%s\n" "Error: Don't know how to checkout '$branch'"
                 return 1
    esac
}

# fallback targets: release/master/@foo if no config file
checkout_bzip2=master
checkout_dav1d=master
checkout_ffmpeg=master
checkout_fontconfig=main
checkout_freetype=master
checkout_fribidi=master
checkout_harfbuzz=main
checkout_libass=master
checkout_libexpat=master
checkout_libplacebo=master
checkout_libpng=master
checkout_mpv=master
checkout_openal=master
checkout_openssl=master
checkout_sdl=main
checkout_zlib=master

checkout_all()
{
    set -ex
    do_clone_all
    checkout bzip2 $checkout_bzip2
    checkout dav1d $checkout_dav1d
    checkout ffmpeg $checkout_ffmpeg
    checkout fontconfig $checkout_fontconfig
    checkout freetype $checkout_freetype
    checkout fribidi $checkout_fribidi
    checkout harfbuzz $checkout_harfbuzz
    checkout libass $checkout_libass
    checkout libexpat $checkout_libexpat
    checkout libplacebo $checkout_libplacebo
    checkout libpng $checkout_libpng
    checkout mpv $checkout_mpv
    checkout openal $checkout_openal
    checkout openssl $checkout_openssl
    checkout sdl $checkout_sdl
    checkout zlib $checkout_zlib
}

do_update_debian_versions()
{
  scripts/debian-update-versions $1
}

if [ x"$1" != x"--skip-selfupdate" ]; then
    (
        set -ex
        git pull --rebase
    )
    exec "$0" --skip-selfupdate "$@"
fi
shift

# allow checkout master/release without checking the config files
case "$1" in
    --main)
        checkout_dav1d="main -"
        checkout_fontconfig="main -"
        checkout_harfbuzz="main -"
        checkout_sdl="main -"
        ;;
    --master)
        checkout_bzip2="master -"
        checkout_ffmpeg="master -"
        checkout_freetype="master -"
        checkout_fribidi="master -"
        checkout_libass="master -"
        checkout_libexpat="master -"
        checkout_libplacebo="master -"
        checkout_libpng="master -"
        checkout_mpv="master -"
        checkout_openal="master -"
        checkout_openssl="master -"
        checkout_zlib="master -"
        ;;
    --release)
        checkout_ffmpeg="release -"
        checkout_mpv="release -"
        ;;
    '')
        ;;
    *)
        echo >&2 "$0 --master"
        echo >&2 "$0 --release"
        exit 0
        ;;
esac

checkout_all

do_update_debian_versions
